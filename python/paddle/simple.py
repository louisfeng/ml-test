from __future__ import print_function
import paddle.fluid as fluid
import numpy
'''
main_program = fluid.default_main_program()
startup_program = fluid.default_startup_program()
with fluid.program_guard(main_program, startup_program):
data = fluid.layers.data(name='data', shape=[2, 4, 6], dtype='float32')
reshaped = fluid.layers.reshape(x=data, shape=[-1, 0, 3, 2], inplace=True)
out_shape = fluid.layers.shape(reshaped)
print numpy.array(out_shape)
place = fluid.CPUPlace()
exe = fluid.Executor(place)
exe.run(startup_program)
x = numpy.random.random(size=(2,4,6)).astype('float32')
outs = exe.run(main_program, feed={'X':x}, fetch_list=[reshaped.name])
#print(outs)
#exe.close()
'''
input_shape = [2, 2, 2]
data = fluid.layers.data(name='data', shape=input_shape, dtype='float32')
#x = numpy.random.random(size=(8, 1)).astype('float32')
data_val = numpy.array([1,2,3,4,5,6,7,8])
# X = fluid.layers.data(name='X', shape=[-1, -1], dtype='int32')
# Y = fluid.layers.data(name='Y', shape=[-1, -1], dtype='int32')
X = fluid.layers.data(name='X', shape=[2], dtype='int32')
Y = fluid.layers.data(name='Y', shape=[2], dtype='int32')
x_val = numpy.array([2,1]).astype('int32')
y_val = numpy.array([2,1]).astype('int32')
new_shape = fluid.layers.elementwise_add(x=X, y=Y)
out = fluid.layers.create_tensor(dtype='float32')
#reshaped = fluid.layers.reshape(x=data, shape=[4,2], inplace=False)
reshaped = fluid.layers.reshape(x=data, shape=[-1,2,2], actual_shape=new_shape, inplace=False)
fluid.layers.assign(reshaped,out)
print(out)
cpu = fluid.CPUPlace()
exe = fluid.Executor(cpu)
#exe.run(fluid.default_startup_program())
model_file = open('./model_out.txt', 'w+')
main_prog = fluid.default_main_program()
print(main_prog, file=model_file)
model_file.close()
outs = exe.run(main_prog, feed={'data': data_val, 'X':x_val, 'Y':y_val}, fetch_list=[reshaped.name])
print(numpy.array(outs))
